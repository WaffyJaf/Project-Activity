import React, { useState, useRef } from "react";
import { useForm, SubmitHandler } from 'react-hook-form';
import Navbar from "../../component/navbar";
import { FormPost, submitFormToAPI, uploadImage } from "../../api/createpost";
import '../css/Eventpost.css'

function Eventpost() {
  // State for modal
  const [showModal, setShowModal] = useState(false);
  const [modalMessage, setModalMessage] = useState("");

  // State for image upload
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const fileToUpload = useRef<File | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Initialize react-hook-form
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors, isSubmitting },
  } = useForm<FormPost>({
    defaultValues: {
      project_id: 0,
      post_content: "",
      image_url: "",
    },
  });

  // Handle file upload
  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const objectUrl = URL.createObjectURL(file);
      setImagePreview(objectUrl);
      fileToUpload.current = file;
    }
  };

  // Handle upload button click
  const handleUploadButtonClick = () => {
    fileInputRef.current?.click();
  };

  // Form submission handler
  const onSubmit: SubmitHandler<FormPost> = async (formData) => {
    try {
      if (fileToUpload.current) {
        const imageUrl = await uploadImage(fileToUpload.current);
        formData.image_url = imageUrl;

      }

      const result = await submitFormToAPI(formData);

      if (result.success) {
        setModalMessage("‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéâ");
        reset();
        setImagePreview(null);
        fileToUpload.current = null;
      } else {
        setModalMessage("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå ‚ùå");
      }

      setShowModal(true);
    } catch (error) {
      console.error("Error:", error);
      setModalMessage("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‚ùå");
      setShowModal(true);
    }
  };

  return (
    <div>
      <Navbar />
      <div className="body">
        <section className="content">
          <span className="head">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå</span>
        </section>
        <div className="container">
          <form onSubmit={handleSubmit(onSubmit)} className="form">
            <div className="form-group">
              <label>‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°<span className="required">*</span></label>
              <input type="number"{...register("project_id", { required: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",min: { value: 1, message: "‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0" }})}/>
              {errors.project_id && <p className="error">{errors.project_id.message}</p>}
              
              <label>‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°<span className="required">*</span></label>
              <textarea {...register("post_content", { required: "‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå",minLength: { value: 10, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£" }})}/>
              {errors.post_content && <p className="error">{errors.post_content.message}</p>}
              
              <div className="form-group">
                <label className="form-label">‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</label>
                <input type="file" ref={fileInputRef} onChange={handleFileUpload} accept="image/*" className="hidden-input"/>
                <input type="hidden" {...register('image_url')} />

                <div className="upload-container">
                  <button type="button" onClick={handleUploadButtonClick} className="upload-button"> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</button>
                  <span className="file-name">
                    {fileToUpload.current ? `‡πÑ‡∏ü‡∏•‡πå: ${fileToUpload.current.name}` : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå'}
                  </span>
                </div>
               
                {/* Image preview */}
                {imagePreview && (
                  <div className="image-preview">
                    <img
                      src={imagePreview}
                      alt="Preview"
                      className="preview-image"
                    />
                  </div>
                )}
              </div>
              
              <div className="form-actions">
                <button type="submit" className="submit-button"disabled={isSubmitting}>
                  {isSubmitting ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå'}
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
      
      {/* Show modal if showModal is true */}
      {showModal && (
        <div className="modal">
          <div className="modal-content">
            <p>{modalMessage}</p> {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á modalMessage */}
            <button onClick={() => setShowModal(false)}>‡∏õ‡∏¥‡∏î</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Eventpost;
